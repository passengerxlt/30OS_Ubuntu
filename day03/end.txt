1. 下载bochs-2.6.6,安装调试版，解决make时的错误。链接问题，修改Makefile配置。
2. 挂载软盘镜像，sudo mount -o loop haribote.img floppy.拷贝文件到目录。
3. 软盘FAT12格式。
4. 关于格式化软盘：1.直接写入启动扇区（FAT12格式和IPL）或2. /sbin/losetup /dev/loop0 haribote.img-使用回馈设备使设备和文件关联
	/sbin/mkfs.vfat -F 12 /dev/loop0-格式化img（启动不对）。然后挂载写入文件。
5. 准备进入32位模式。BIOS使用16位机器语言写的，进入32位模式后就不能调用BIOS函数了。IA-32 read-address mode 下可以使用32寄存器（有限个），使用32位前缀，可以访问32地址和32偏移。同样32位下，也可以使用前缀访问16位寄存器和16位地址。编译器编译同样的代码，编译成16位和32位是不一样的，有些因为是32位使用16位寄存器或16位使用32位寄存器，会加前缀，有些是因为本来就不同。当代码编译出来以后，如果混合在一起，当实地址模式下执行32位代码，会被翻译成乱的指令。［32位代码和16位代码使用32位寄存器和地址是不同的］。
6. 切换到32位模式，然后调用C语言写的程序。在编译跳转到32位模式时，编译出错，代码没看懂。C语言代码到汇编时链接出问题，由于没有作者提供的windows版本的工具，暂时暂停，先转到linux版的《自动动手写操作系统》，学习32位模式跳转和作者如何链接C语言的。
7. 使用IPL加载10个柱面，然后跳转到C400（地一个文件的内容所在的地址）执行失败，内容正确，进入32位模式时失败。测试作者的成功（需修改bochs配置，因为版本不同）。明天查找原因。
8. 今天开始查找原因：1. 段属性错误导致跳转到32位模式失败。2. GDT界限写入错误，编码疏忽，导致GDT项比较多。3. 显存地址写错。
9. 当TI和RPL为0时，选择子就变成了对应的描述符想对于GDT基址的偏移。
10. 进入保护模式之前先关中断，保护模式中断处理机制不同。
11. A20地址线。操作92h端口是一种方式。
12. CR0寄存器，打开保护模式开关。打开后，仍然是实模式的16位在执行，当执行JMPf后跳转到32位保护模式（设置了CS段选择子，设置之前CS为0）。JMPF其实是JMP DWORD Selector:offset。编译后为家了66H前缀，在IA-32模式下，意义不同。
13. 打开保护模式后，以后的指令就要遵守保护模式的规则了。如INT，CALL等。所以此处先修改CS的值，使用JMP DWORD Selector:offset，16位代码，但目标地址是32位的（Mixing 16 and 32 Bit Code），与以往的JMP不同。
14. 16Bits汇编和32位的区别？同样的指令汇编后的二进制有什么不同？
15. gcc编译后的文件都具有文件格式，如何编译与NASM编译后的文件一样的二进制（没有格式头等，直接是指令）？
16. 64位Ubuntu下NASM后是32位程序，gcc是64位程序，ld是64位程序，默认链接会出问题。可以强制gcc -m32 32位程序， ld -m elf_i386 链接。
17. 如果NASM -f elf64 生成64位程序，汇编出错（PUSH的操作数大小问题），以后再研究。另外一个问题，gcc编译64位程序时，即使指定调用约定，编译器也不一定按照参数从右至左的方式入栈，可能全使用寄存器，所以c与汇编混合编程时要特别注意（以后研究）。
18. 明天：GCC编译Main函数。直接gcc .c文件提示main函数错误。-c 只生成ELF格式中间文件。ld 链接生成ELF格式文件可以指定或不指定入口。
19. objcopy -O binary 从elf文件中剥离出汇编。asmhead.asm中映射作者自定义格式文件和指定栈和入口需要修改一下（根据文件格式而不同，此处只有汇编代码且没有地址相关指令，直接跳转到起始地址即可）。
20. asm和c混合编程，asm支持elf格式，gcc默认elf格式，链接不会有问题。书中使用WCOFF格式。
21. Bochs调试时，HLT后再JMP到HLT调试会中止，HLT后RET到调用函数也会中止，原因不明？
