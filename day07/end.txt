day07

1. 加入sprintf函数，链接时提示找不到sprintf，该名称为sprintfmy解决，原因明天查找。原因为前面用了#define sprintf my_spirntf。
2. 调用sprintf函数时，没有效果，查看bochs日志，offset越界。指令为：jmp eax，eax的值为0x28****，超出段的limit。链接时，指定代码基地址为0x280000，其他模块的函数调用都为call（短跳转偏移的那种）没有问题，此JMP是长跳转。所以修改段基地址为0x00000000，limit=0xffffffff。要修改段描述符的G，其他属性不变。［后记］修改段属性后，运行失败，调试，当CS=1＊8，IP=0x280010，CALL（+xxxx），进入后，IP少了280000。对比前一天的调试，原来：由于G+D/B位计算错误，导致D/B为0，CS指向的段为16位段。修改后成功。
3. C编译器好像会默认把代码段和数据段的基地址=0x00000000和界限=0xffffffff，且认为DS=ES=SS。然后相对虚拟地址的使用不用考虑，绝对虚拟地址就是ELF格式指定的地址。而加载elf文件，也只需要考虑据对虚拟地址。本系统的加载模块把elf文件按文件格式映射到0x00280000，并且不进行重定位。如果把代码段和数据段的基地址=0x00000000，界限=0xffffffff就没问题。而本系统把段基地址=0x00280000，其他段基地址=0x00000000，所以问题来了，你猜会出现什么问题？如果通过绝对虚拟地址来修改IP，CPU解析的时候会加上基地址0x00280000，访问肯定出错。如gcc会把switch的所有case编译成一个表在数据段，没个case对应一个表项，然后通过偏移查找到绝对虚拟地址跳转。本系统只用把sprintf函数简化，只用%x，把switch case 改为for，就只有相对虚拟地址了。所以还按原来的来：即CS基地址0x280000，DS基地址0x000000.
4. 使用鼠标还得多操纵几个端口。测试中没有收到鼠标消息，原因为Bochs鼠标配置不对。
